CCS PCH C Compiler, Version 4.132, 55358               12-9-18 19:39

               Filename: C:\Users\Keisuke\Documents\Private\Program\PIC_Servo\PIC_Servo.lst

               ROM used: 2276 bytes (3%)
                         Largest free fragment is 63256
               RAM used: 48 (1%) at main() level
                         82 (2%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
00000:  GOTO   06F2
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  FF2.5
00056:  GOTO   0060
0005A:  BTFSC  FF2.2
0005C:  GOTO   0226
00060:  BTFSS  F9D.0
00062:  GOTO   006C
00066:  BTFSC  F9E.0
00068:  GOTO   036E
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... #include <18f26k22.h> 
.................... //////// Standard Header file for the PIC18F26K22 device //////////////// 
.................... #device PIC18F26K22 
.................... #list 
....................  
.................... #fuses INTRC, PUT, NOBROWNOUT, NOWDT, NOPROTECT, NOLVP, NOMCLR 
.................... #use delay(CLOCK = 64M) 
006C8:  CLRF   FEA
006CA:  MOVLW  2E
006CC:  MOVWF  FE9
006CE:  MOVF   FEF,W
006D0:  BZ    06EE
006D2:  MOVLW  14
006D4:  MOVWF  01
006D6:  CLRF   00
006D8:  DECFSZ 00,F
006DA:  BRA    06D8
006DC:  DECFSZ 01,F
006DE:  BRA    06D6
006E0:  MOVLW  BF
006E2:  MOVWF  00
006E4:  DECFSZ 00,F
006E6:  BRA    06E4
006E8:  BRA    06EA
006EA:  DECFSZ FEF,F
006EC:  BRA    06D2
006EE:  GOTO   08E2 (RETURN)
.................... #use RS232(BAUD=19200,XMIT=PIN_C6,RCV=PIN_C7) 
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... // サーボ信号出力用割り込み 
.................... // T0の周期[us] 
.................... #define T0_PERIOD 50 
.................... // プリスケーラ16/(64[MHz]/4)=1[us/カウント] 
.................... // T0_INTERVAL[カウント] = T0_PERIOD[us] / 1[us/カウント] 
.................... #define T0_INTERVAL T0_PERIOD 
.................... // T0_20ms[ms] = (20[ms] / 1[us/カウント]) / T0_INTERVAL[カウント] 
.................... #define T0_20ms (20000 / T0_INTERVAL) 
....................  
.................... // 入力状態時間計測用割り込み 
.................... // T1の周期[us] 
.................... #define T1_PERIOD 10000 
.................... // プリスケーラ8/(64MHz/4)=0.5us/カウント 
.................... // T1_INTERVAL[カウント] = T1_PERIOD[us] / 0.5[us/カウント] = T1_PERIOD * 2 
.................... #define T1_INTERVAL (T1_PERIOD * 2) 
....................  
.................... /*****************************変更ポイント*****************************/ 
.................... // サーボの個数 
.................... #define SERVO_NUM 2 
.................... // 入力ピンの数 
.................... #define IN_NUM 1 
....................  
.................... /*****************************変更ポイント*****************************/ 
.................... // サーボ信号出力ピン 
.................... int servoOut[SERVO_NUM] = {PIN_C2, PIN_C3}; 
.................... // 入力ピン 
.................... int inPin[IN_NUM] = {PIN_C5}; 
....................  
.................... // 出力するサーボの値[ms] 
.................... // (1000/T0_PERIOD)が掛けられるため小数点以下に注意 
.................... float servoPulse[SERVO_NUM] = {0}; 
.................... // 入力ピン変化後の秒数[ds] 
.................... // 最大6553.5s=109.225min 
.................... long inCount[IN_NUM] = {0}; 
....................  
....................  
.................... // pin_numに対応した入力を返す 
.................... int in(int pin_num) 
.................... { 
.................... 	return input(inPin[pin_num]); 
*
00344:  CLRF   03
00346:  MOVF   43,W
00348:  ADDLW  1C
0034A:  MOVWF  FE9
0034C:  MOVLW  00
0034E:  ADDWFC 03,W
00350:  MOVWF  FEA
00352:  MOVFF  FEF,44
00356:  MOVFF  44,45
0035A:  MOVLW  0F
0035C:  MOVWF  47
0035E:  MOVLW  80
00360:  MOVWF  46
00362:  RCALL  0316
00364:  MOVLW  00
00366:  BTFSC  01.0
00368:  MOVLW  01
0036A:  MOVWF  01
.................... } 
0036C:  RETURN 0
....................  
.................... void main(void) 
.................... { 
*
006F2:  CLRF   FF8
006F4:  BCF    FD0.7
006F6:  BSF    07.7
006F8:  CLRF   FEA
006FA:  CLRF   FE9
006FC:  MOVLW  70
006FE:  MOVWF  FD3
00700:  BSF    F9B.6
00702:  BCF    F9B.7
00704:  BSF    FB8.3
00706:  MOVLW  40
00708:  MOVWF  FAF
0070A:  MOVLW  03
0070C:  MOVWF  FB0
0070E:  MOVLW  A6
00710:  MOVWF  FAC
00712:  MOVLW  90
00714:  MOVWF  FAB
00716:  CLRF   28
00718:  CLRF   27
0071A:  CLRF   2B
0071C:  MOVF   FC1,W
0071E:  ANDLW  F0
00720:  MOVWF  FC1
00722:  MOVLW  00
00724:  MOVLB  F
00726:  MOVWF  x38
00728:  MOVWF  x3C
0072A:  MOVWF  x39
0072C:  MOVWF  x3A
0072E:  MOVWF  x3B
00730:  CLRF   F77
00732:  CLRF   F78
00734:  CLRF   F79
00736:  MOVLW  12
00738:  MOVWF  1A
0073A:  MOVLW  13
0073C:  MOVWF  1B
0073E:  MOVLW  15
00740:  MOVWF  1C
00742:  CLRF   1D
00744:  CLRF   1E
00746:  CLRF   1F
00748:  CLRF   20
0074A:  CLRF   21
0074C:  CLRF   22
0074E:  CLRF   23
00750:  CLRF   24
00752:  CLRF   25
00754:  CLRF   26
00756:  CLRF   29
00758:  CLRF   2A
0075A:  CLRF   2C
.................... 	// 変数宣言 
.................... 	int i; 
.................... 	// セットトリス 
.................... 	set_tris_a(0b10000000); 
0075C:  MOVLW  80
0075E:  MOVWF  F92
.................... 	set_tris_b(0b10000000); 
00760:  MOVWF  F93
.................... 	set_tris_c(0b00110000); 
00762:  MOVLW  30
00764:  MOVWF  F94
.................... 	// サーボ信号送信用タイマ 
.................... 	// プリスケーラ16/(64MHz/4)=1us/カウント 
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_16); 
00766:  MOVLW  83
00768:  MOVWF  FD5
.................... 	// 入力ピンの変化していない時間を計るタイマ 
.................... 	// プリスケーラ8/(64MHz/4)=0.5us/カウント 
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0076A:  MOVLW  37
0076C:  MOVWF  FCD
0076E:  CLRF   FCC
.................... 	// 割り込み許可 
.................... 	enable_interrupts(INT_TIMER0); 
00770:  BSF    FF2.5
.................... 	enable_interrupts(INT_TIMER1); 
00772:  BSF    F9D.0
.................... 	 
.................... 	enable_interrupts(GLOBAL); 
00774:  MOVLW  C0
00776:  IORWF  FF2,F
.................... 	while(1) 
.................... 	{ 
.................... 		/*****************************変更ポイント*****************************/ 
.................... 		/* 
.................... 			in(0)が0→1 : servoOut[0]が動作 
.................... 			in(0)が1→0 : servoOut[1]が動作 
.................... 		*/ 
.................... 		if(inCount[0] < 5) 
00778:  MOVF   26,F
0077A:  BTFSS  FD8.2
0077C:  BRA    0894
0077E:  MOVF   25,W
00780:  SUBLW  04
00782:  BTFSS  FD8.0
00784:  BRA    0894
00786:  CLRF   19
00788:  BTFSC  FF2.7
0078A:  BSF    19.7
0078C:  BCF    FF2.7
.................... 		{ 
.................... 			servoPulse[0] = 1.40 +  in(0)*0.25; 
0078E:  CLRF   43
00790:  MOVLB  0
00792:  RCALL  0344
00794:  BTFSC  19.7
00796:  BSF    FF2.7
00798:  CLRF   30
0079A:  MOVFF  01,2F
0079E:  RCALL  0428
007A0:  CLRF   19
007A2:  BTFSC  FF2.7
007A4:  BSF    19.7
007A6:  BCF    FF2.7
007A8:  MOVFF  03,4A
007AC:  MOVFF  02,49
007B0:  MOVFF  01,48
007B4:  MOVFF  00,47
007B8:  CLRF   4E
007BA:  CLRF   4D
007BC:  CLRF   4C
007BE:  MOVLW  7D
007C0:  MOVWF  4B
007C2:  RCALL  00FA
007C4:  BTFSC  19.7
007C6:  BSF    FF2.7
007C8:  MOVFF  FEA,2F
007CC:  MOVFF  FE9,2E
007D0:  BCF    FD8.1
007D2:  MOVLW  33
007D4:  MOVWF  33
007D6:  MOVWF  32
007D8:  MOVWF  31
007DA:  MOVLW  7F
007DC:  MOVWF  30
007DE:  MOVFF  03,37
007E2:  MOVFF  02,36
007E6:  MOVFF  01,35
007EA:  MOVFF  00,34
007EE:  RCALL  045E
007F0:  MOVFF  2F,FEA
007F4:  MOVFF  2E,FE9
007F8:  MOVFF  03,20
007FC:  MOVFF  02,1F
00800:  MOVFF  01,1E
00804:  MOVFF  00,1D
00808:  CLRF   19
0080A:  BTFSC  FF2.7
0080C:  BSF    19.7
0080E:  BCF    FF2.7
.................... 			servoPulse[1] = 1.40 + !in(0)*0.25; 
00810:  CLRF   43
00812:  RCALL  0344
00814:  BTFSC  19.7
00816:  BSF    FF2.7
00818:  MOVF   01,F
0081A:  BZ    0820
0081C:  MOVLW  00
0081E:  BRA    0822
00820:  MOVLW  01
00822:  CLRF   30
00824:  MOVWF  2F
00826:  RCALL  0428
00828:  CLRF   19
0082A:  BTFSC  FF2.7
0082C:  BSF    19.7
0082E:  BCF    FF2.7
00830:  MOVFF  03,4A
00834:  MOVFF  02,49
00838:  MOVFF  01,48
0083C:  MOVFF  00,47
00840:  CLRF   4E
00842:  CLRF   4D
00844:  CLRF   4C
00846:  MOVLW  7D
00848:  MOVWF  4B
0084A:  RCALL  00FA
0084C:  BTFSC  19.7
0084E:  BSF    FF2.7
00850:  MOVFF  FEA,2F
00854:  MOVFF  FE9,2E
00858:  BCF    FD8.1
0085A:  MOVLW  33
0085C:  MOVWF  33
0085E:  MOVWF  32
00860:  MOVWF  31
00862:  MOVLW  7F
00864:  MOVWF  30
00866:  MOVFF  03,37
0086A:  MOVFF  02,36
0086E:  MOVFF  01,35
00872:  MOVFF  00,34
00876:  RCALL  045E
00878:  MOVFF  2F,FEA
0087C:  MOVFF  2E,FE9
00880:  MOVFF  03,24
00884:  MOVFF  02,23
00888:  MOVFF  01,22
0088C:  MOVFF  00,21
.................... 		} 
.................... 		else if(5 <= inCount[0] && inCount[0] < 10) 
00890:  BRA    08DC
00892:  MOVLB  F
00894:  MOVF   26,F
00896:  BNZ   089E
00898:  MOVF   25,W
0089A:  SUBLW  04
0089C:  BC    08C2
0089E:  MOVF   26,F
008A0:  BNZ   08C2
008A2:  MOVF   25,W
008A4:  SUBLW  09
008A6:  BNC   08C2
.................... 		{ 
.................... 			servoPulse[0] = 1.40; 
008A8:  MOVLW  33
008AA:  MOVWF  20
008AC:  MOVWF  1F
008AE:  MOVWF  1E
008B0:  MOVLW  7F
008B2:  MOVWF  1D
.................... 			servoPulse[1] = 1.40; 
008B4:  MOVLW  33
008B6:  MOVWF  24
008B8:  MOVWF  23
008BA:  MOVWF  22
008BC:  MOVLW  7F
008BE:  MOVWF  21
.................... 		} 
.................... 		else 
008C0:  BRA    08DA
.................... 		{ 
.................... 			servoPulse[0] = servoPulse[1] = 0; 
008C2:  CLRF   24
008C4:  CLRF   23
008C6:  CLRF   22
008C8:  CLRF   21
008CA:  MOVFF  24,20
008CE:  MOVFF  23,1F
008D2:  MOVFF  22,1E
008D6:  MOVFF  21,1D
008DA:  MOVLB  0
.................... 		} 
.................... 		 
.................... 		// 待機 
.................... 		delay_ms(10); 
008DC:  MOVLW  0A
008DE:  MOVWF  2E
008E0:  BRA    06C8
.................... 	} 
008E2:  MOVLB  F
008E4:  BRA    0778
.................... } 
....................  
.................... #INT_TIMER0 
.................... void intTimer0(void) 
008E6:  SLEEP 
.................... { 
.................... 	int i; 
.................... 	// 割り込み回数カウント 
.................... 	static long count = 0; 
.................... 	// servoPulseの値を保持する 
.................... 	static int myServoPulse[SERVO_NUM] = {0}; 
.................... 	// タイマー再設定 
.................... 	set_timer0(0xffff - T0_INTERVAL); 
*
00226:  SETF   FD7
00228:  MOVLW  CD
0022A:  MOVWF  FD6
.................... 	// サーボ信号出力 
.................... 	for(i = 0; i < SERVO_NUM; i++) 
0022C:  CLRF   40
0022E:  MOVF   40,W
00230:  SUBLW  01
00232:  BNC   0278
.................... 	{ 
.................... 		// カウント比較してパルス出力 
.................... 		output_bit(servoOut[i], count < myServoPulse[i]); 
00234:  CLRF   03
00236:  MOVF   40,W
00238:  ADDLW  1A
0023A:  MOVWF  FE9
0023C:  MOVLW  00
0023E:  ADDWFC 03,W
00240:  MOVWF  FEA
00242:  MOVFF  FEF,41
00246:  CLRF   03
00248:  MOVF   40,W
0024A:  ADDLW  29
0024C:  MOVWF  FE9
0024E:  MOVLW  00
00250:  ADDWFC 03,W
00252:  MOVWF  FEA
00254:  MOVF   FEF,W
00256:  MOVF   28,F
00258:  BNZ   025E
0025A:  SUBWF  27,W
0025C:  BNC   0262
0025E:  MOVLW  00
00260:  BRA    0264
00262:  MOVLW  01
00264:  MOVFF  41,42
00268:  MOVWF  43
0026A:  MOVLW  0F
0026C:  MOVWF  45
0026E:  MOVLW  89
00270:  MOVWF  44
00272:  BRA    00BA
.................... 	} 
00274:  INCF   40,F
00276:  BRA    022E
.................... 	// インクリメント 
.................... 	count++; 
00278:  INCF   27,F
0027A:  BTFSC  FD8.2
0027C:  INCF   28,F
.................... 	// 20msを超えたらリセット 
.................... 	if(count > T0_20ms) 
0027E:  MOVF   28,W
00280:  SUBLW  00
00282:  BC    0310
00284:  XORLW  FF
00286:  BNZ   028E
00288:  MOVF   27,W
0028A:  SUBLW  90
0028C:  BC    0310
.................... 	{ 
.................... 		// count初期化 
.................... 		count = 0; 
0028E:  CLRF   28
00290:  CLRF   27
.................... 		// 値更新 
.................... 		for(i = 0; i < SERVO_NUM; i++) 
00292:  CLRF   40
00294:  MOVF   40,W
00296:  SUBLW  01
00298:  BNC   0310
.................... 		{ 
.................... 			// myServoPulse[カウント]=servoPulse[ms]*1000[u/m]/T0_PERIOD[us] 
.................... 			myServoPulse[i] = servoPulse[i] * (1000 / T0_PERIOD); 
0029A:  CLRF   03
0029C:  MOVF   40,W
0029E:  ADDLW  29
002A0:  MOVWF  01
002A2:  MOVLW  00
002A4:  ADDWFC 03,F
002A6:  MOVFF  01,41
002AA:  MOVFF  03,42
002AE:  MOVF   40,W
002B0:  MULLW  04
002B2:  MOVF   FF3,W
002B4:  CLRF   03
002B6:  ADDLW  1D
002B8:  MOVWF  FE9
002BA:  MOVLW  00
002BC:  ADDWFC 03,W
002BE:  MOVWF  FEA
002C0:  MOVFF  FEF,43
002C4:  MOVFF  FEC,44
002C8:  MOVFF  FEC,45
002CC:  MOVFF  FEC,46
002D0:  MOVFF  46,4A
002D4:  MOVFF  45,49
002D8:  MOVFF  44,48
002DC:  MOVFF  43,47
002E0:  CLRF   4E
002E2:  CLRF   4D
002E4:  MOVLW  20
002E6:  MOVWF  4C
002E8:  MOVLW  83
002EA:  MOVWF  4B
002EC:  RCALL  00FA
002EE:  MOVFF  03,46
002F2:  MOVFF  02,45
002F6:  MOVFF  01,44
002FA:  MOVFF  00,43
002FE:  BRA    01EC
00300:  MOVFF  42,FEA
00304:  MOVFF  41,FE9
00308:  MOVFF  01,FEF
.................... 		} 
0030C:  INCF   40,F
0030E:  BRA    0294
.................... 	} 
.................... } 
....................  
00310:  BCF    FF2.2
00312:  GOTO   006C
.................... #INT_TIMER1 
.................... void intTimer1(void) 
.................... { 
.................... 	int i; 
.................... 	// 割り込み回数カウント 
.................... 	static int count = 0; 
.................... 	// 前の割り込みでの入力の値 
.................... 	static int inOld[IN_NUM] = {0}; 
.................... 	// タイマー再設定 
.................... 	set_timer1(0xffff - T1_INTERVAL); 
*
0036E:  MOVLW  B1
00370:  MOVWF  FCF
00372:  MOVLW  DF
00374:  MOVWF  FCE
.................... 	// 10ms * 10 = 0.1sごとに実行する 
.................... 	if(count >= 10) 
00376:  MOVF   2B,W
00378:  SUBLW  09
0037A:  BC    0420
.................... 	{ 
.................... 		// count初期化 
.................... 		count = 0; 
0037C:  CLRF   2B
.................... 		// 値更新 
.................... 		for(i = 0; i < IN_NUM; i++) 
0037E:  CLRF   40
00380:  MOVF   40,F
00382:  BNZ   0420
.................... 		{ 
.................... 			// 以前と同じ値だったらインクリメント 
.................... 			// 違ったら0にする 
.................... 			if(in(i) == inOld[i]) 
00384:  MOVFF  40,43
00388:  RCALL  0344
0038A:  MOVFF  01,41
0038E:  CLRF   03
00390:  MOVF   40,W
00392:  ADDLW  2C
00394:  MOVWF  FE9
00396:  MOVLW  00
00398:  ADDWFC 03,W
0039A:  MOVWF  FEA
0039C:  MOVF   FEF,W
0039E:  SUBWF  01,W
003A0:  BNZ   03E0
.................... 			{ 
.................... 				// オーバーフローしそうだったら回避する 
.................... 				if(inCount[i] < 0xffff) 
003A2:  BCF    FD8.0
003A4:  RLCF   40,W
003A6:  CLRF   03
003A8:  ADDLW  25
003AA:  MOVWF  FE9
003AC:  MOVLW  00
003AE:  ADDWFC 03,W
003B0:  MOVWF  FEA
003B2:  MOVFF  FEC,42
003B6:  MOVF   FED,F
003B8:  MOVFF  FEF,41
003BC:  INCFSZ 41,W
003BE:  BRA    03C6
003C0:  INCFSZ 42,W
003C2:  BRA    03C6
003C4:  BRA    03DE
.................... 					inCount[i]++; 
003C6:  BCF    FD8.0
003C8:  RLCF   40,W
003CA:  CLRF   03
003CC:  ADDLW  25
003CE:  MOVWF  FE9
003D0:  MOVLW  00
003D2:  ADDWFC 03,W
003D4:  MOVWF  FEA
003D6:  MOVLW  01
003D8:  ADDWF  FEE,F
003DA:  BNC   03DE
003DC:  INCF   FEF,F
.................... 			} 
.................... 			else 
003DE:  BRA    041C
.................... 			{ 
.................... 				inCount[i] = 0; 
003E0:  BCF    FD8.0
003E2:  RLCF   40,W
003E4:  CLRF   03
003E6:  ADDLW  25
003E8:  MOVWF  FE9
003EA:  MOVLW  00
003EC:  ADDWFC 03,W
003EE:  MOVWF  FEA
003F0:  CLRF   FEC
003F2:  MOVF   FED,F
003F4:  CLRF   FEF
.................... 				inOld[i] = in(i); 
003F6:  CLRF   03
003F8:  MOVF   40,W
003FA:  ADDLW  2C
003FC:  MOVWF  01
003FE:  MOVLW  00
00400:  ADDWFC 03,F
00402:  MOVFF  01,41
00406:  MOVFF  03,42
0040A:  MOVFF  40,43
0040E:  RCALL  0344
00410:  MOVFF  42,FEA
00414:  MOVFF  41,FE9
00418:  MOVFF  01,FEF
.................... 			} 
.................... 		} 
0041C:  INCF   40,F
0041E:  BRA    0380
.................... 	} 
.................... 	// インクリメント 
.................... 	count++; 
00420:  INCF   2B,F
.................... } 
00422:  BCF    F9E.0
00424:  GOTO   006C

Configuration Fuses:
   Word  1: F900   INTRC PLLEN PRIMARY FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: 3F00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
